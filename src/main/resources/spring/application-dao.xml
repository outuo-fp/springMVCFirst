<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:util="http://www.springframework.org/schema/util" xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd 
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

    <description>Spring公共配置</description>
 	
    <!-- 开启定时任务 -->
    <task:annotation-driven/>
    
	<!-- production环境，加载配置文件 -->
   
    <context:property-placeholder ignore-unresolvable="true" file-encoding="utf-8" 
        location="classpath:config.properties,classpath:jdbc.properties" />
    
    
    <!-- 数据源配置, 使用Tomcat JDBC连接池 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
        <!-- Connection Info -->
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />

        <!-- Connection Pooling Info -->
        <property name="maxActive" value="${jdbc.pool.maxActive}" />
        <property name="maxIdle" value="${jdbc.pool.maxIdle}" />
        <property name="minIdle" value="0" />
        <property name="defaultAutoCommit" value="false" />
    </bean>
    
    <!-- MyBatis配置 
       加载数据源，配置文件
    -->   
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <!-- 数据源，JDBC -->
        <property name="dataSource" ref="dataSource" />
        <!-- 显式指定Mapper文件位置 -->
		<!-- <property name="mapperLocations" value="classpath*:/mybatis/*Mapper.xml" /> -->
		<!-- mybatis配置文件路径 -->
        <property name="configLocation" value="classpath:/mybatis/sqlConfig.xml"/>    
    </bean>
     
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
       <constructor-arg index="0" ref="sqlSessionFactory" />
       <!-- 这个执行器会批量执行更新语句, 还有SIMPLE 和 REUSE -->
       <constructor-arg index="1" value="BATCH" />
    </bean>
    
     <!-- mapper 配置
    mapperFactoryBean:根据mapper接口生成代理对象,jave类与xml可以不在一个文件夹下
     -->
<!--      <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
     mapperInterface 指定mapper接口 
     <property name="mapperInterface" value="com.jikexueyuan.demo.dao.ITableIpDao" />
     <property name="sqlSessionFactory" ref="sqlSessionFactory"/>  
     </bean> -->
    <!-- 扫描basePackage接口，进行mapper扫描
        自动扫描出来bean的id是类名（首字母小写）
     -->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    	<!-- 映射器接口文件的包路径， -->
        <property name="basePackage" value="com.fp.ssm.dao" />
        <!-- mapper构建sqlSessionFactory -->
       <!--  <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/> -->
    </bean> 

    <!-- 使用annotation定义事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
      
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" /> 
	
<!-- 	    通知
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
			传播行为 
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			
		</tx:attributes>
	</tx:advice>

	<aop:config expose-proxy="true">
        只对业务逻辑层实施事务
        <aop:pointcut id="txPointcut" expression="execution(* com.fp.ssm.service.*.*(..))" />
        Advisor定义，切入点和通知分别为txPointcut、txAdvice
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config> -->


</beans>